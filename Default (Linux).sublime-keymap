[
  // My Customization
  // Navigation
  { "keys": ["ctrl+shift+h"], "command": "move_to_neighboring_group", "args": {"forward": false}, "context": [{"key": "setting.command_mode"}] },
  { "keys": ["ctrl+shift+l"], "command": "move_to_neighboring_group", "args": {"forward": true}, "context": [{"key": "setting.command_mode"}] },
  { "keys": ["H"], "command": "focus_neighboring_group", "args": {"forward": false}, "context": [{"key": "setting.command_mode"}] },
  { "keys": ["L"], "command": "focus_neighboring_group", "context": [{"key": "setting.command_mode"}] },
  { "keys": ["h"], "command": "move", "args": {"by": "characters", "forward": false},
    "context": [{"key": "control", "operand": "sidebar_tree"} ] },
  { "keys": ["j"], "command": "move", "args": {"by": "lines", "forward": true},
    "context": [{"key": "control", "operand": "sidebar_tree"} ] },
  { "keys": ["k"], "command": "move", "args": {"by": "lines", "forward": false},
    "context": [{"key": "control", "operand": "sidebar_tree"} ] },
  { "keys": ["l"], "command": "move", "args": {"by": "characters", "forward": true},
    "context": [{"key": "control", "operand": "sidebar_tree"} ] },
  { "keys": ["ctrl+k"], "command": "move", "args": {"by": "lines", "forward": false},
    "context": [{"key": "overlay_visible", "operator": "equal", "operand": true}] },
  { "keys": ["ctrl+j"], "command": "move", "args": {"by": "lines", "forward": true},
    "context": [{"key": "overlay_visible", "operator": "equal", "operand": true}] },
  { "keys": ["ctrl+k"], "command": "move", "args": {"by": "lines", "forward": false},
    "context": [{"key": "auto_complete_visible", "operator": "equal", "operand": true}] },
  { "keys": ["ctrl+j"], "command": "move", "args": {"by": "lines", "forward": true},
    "context": [{"key": "auto_complete_visible", "operator": "equal", "operand": true}] },
  { "keys": ["ctrl+k"], "command": "scroll_lines", "args": {"amount": 1.0 },
    "context": [{"key": "overlay_visible", "operator": "equal", "operand": false},
                {"key": "auto_complete_visible", "operator": "equal", "operand": false}] },
  { "keys": ["ctrl+j"], "command": "scroll_lines", "args": {"amount": -1.0 },
    "context": [{"key": "overlay_visible", "operator": "equal", "operand": false},
                {"key": "auto_complete_visible", "operator": "equal", "operand": false}] },
  {"keys": ["ctrl+h"], "command": "move_to", "args": {"to": "bol", "extend": false} },
  {"keys": ["ctrl+l"], "command": "move_to", "args": {"to": "eol", "extend": false} },
  {"keys": ["ctrl+alt+w"], "command": "close_tabs"},
  {"keys": ["ctrl+alt+h"], "command": "move_tab", "args": {"offset": "-1"}},
  {"keys": ["ctrl+alt+l"], "command": "move_tab", "args": {"offset": "1"}},
  {"keys": ["alt+h"], "command": "prev_view"},
  {"keys": ["alt+l"], "command": "next_view"},
  {"keys": [",", "/"], "command": "toggle_and_focus_sidebar"},
  {"keys": [",", "."], "command": "reveal_and_focus_sidebar", "context": [{"key": "setting.command_mode"}] },
  // {"keys": [",", "."], "command": "reveal_in_side_bar", "context": [{"key": "setting.command_mode"}] },
  {"keys": ["ctrl+shift+o"], "command": "favorite_files_open"},

  // Edit
  { "keys": ["u"], "command": "undo", "context": [{"key": "setting.command_mode"}] },
  { "keys": ["ctrl+r"], "command": "redo", "context": [{"key": "setting.command_mode"}] },
  { "keys": ["alt+u"], "command": "soft_undo" },
  { "keys": ["alt+shift+u"], "command": "soft_redo" },
  { "keys": ["alt+d"], "command": "find_under_expand" },
  { "keys": ["alt+s"], "command": "find_under_expand_skip" },
  { "keys": ["alt+f"], "command": "find_under" },
  { "keys": ["alt+shift+f"], "command": "find_prev" },
  { "keys": [",", "h"], "command": "show_panel", "args": {"panel": "replace", "reverse": false}, "context": [{"key": "setting.command_mode"}] },
  // { "keys": [" ", "j"], "command": "join_lines", "context": [{"key": "setting.command_mode"}] },
  // Edit: Vintage Numbers
  { "keys": ["alt+a"], "command": "set_action_motion", "args": {
    "action": "vi_increment_number",
    "motion": null },
    "context": [{"key": "setting.command_mode"}]
  },
  { "keys": ["alt+x"], "command": "set_action_motion", "args": {
    "action": "vi_decrement_number",
    "motion": null },
    "context": [{"key": "setting.command_mode"}]
  },
  { "keys": [",", "q"], "command": "run_macro", "context": [{"key": "setting.command_mode"}]},

  // Fold
  { "keys": [",", "["], "command": "fold", "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "]"], "command": "unfold", "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "1"], "command": "fold_by_level", "args": {"level": 1}, "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "2"], "command": "fold_by_level", "args": {"level": 2}, "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "3"], "command": "fold_by_level", "args": {"level": 3}, "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "4"], "command": "fold_by_level", "args": {"level": 4}, "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "5"], "command": "fold_by_level", "args": {"level": 5}, "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "6"], "command": "fold_by_level", "args": {"level": 6}, "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "7"], "command": "fold_by_level", "args": {"level": 7}, "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "8"], "command": "fold_by_level", "args": {"level": 8}, "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "9"], "command": "fold_by_level", "args": {"level": 9}, "context": [{"key": "setting.command_mode"}] },
  { "keys": [",", "0"], "command": "unfold_all", "context": [{"key": "setting.command_mode"}] },
  // { "keys": [",", "t"], "command": "fold_tag_attributes", "context": [{"key": "setting.command_mode"}] },

  // MISC
  { "keys": ["alt+b"], "command": "build", "args": {"select": true}, "context": [{"key": "build_fake", "operator": "equal", "operand": true}] },
  {"keys": ["alt+e"], "command": "toggle_menu"},
  {"keys": [",", "c", "f"], "command": "copy_file_path"},
  {"keys": [",", "c", "d"], "command": "copy_file_folder_path"},
  {"keys": [",", "c", "p"], "command": "copy_project_folder_path"},
  {"keys": [",", "o", "f"], "command": "open_file_folder"},
  {"keys": [",", "o", "p"], "command": "open_project_folder"},
  {"keys": [",", "o", "s"], "command": "open_path",
    "args": {"path": "/home/jake/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"}},
  {"keys": [",", "o", "k"], "command": "open_path",
    "args": {"path": "/home/jake/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"}},
  // { "keys": ["j", "k"], "command": "exit_insert_mode",
  //   "context":
  //   [
  //       {"key": "setting.command_mode", "operand": false},
  //       {"key": "setting.is_widget", "operand": false}
  //   ]
  // },
  // { "keys": ["k", "j"], "command": "exit_insert_mode",
  //   "context":
  //   [
  //       {"key": "setting.command_mode", "operand": false},
  //       {"key": "setting.is_widget", "operand": false}
  //   ]
  // },
  {
    "keys": [",", "s"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"},
    "context": [{"key": "setting.command_mode"}]
  },
  // {"keys": [" ", "p"], "command": "goto_symbol_in_project", "context": [{"key": "setting.command_mode"}]},
  { "keys": ["ctrl+w"], "command": "close", "context": [{"key": "setting.command_mode"}]},
  { "keys": ["z"], "command": "close", "context": [{"key": "setting.command_mode"}]},
  { "keys": ["Z"], "command": "reopen_last_file", "context": [{"key": "setting.command_mode"}]},
  // { "keys": [" ", "["], "command": "fold" },
  // { "keys": [" ", "]"], "command": "unfold" },
  {
    "keys": ["alt+shift+3"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 1.0],
      "rows": [0.0, 0.5, 1.0],
      "cells": [[0, 0, 1, 1], [0, 1, 1, 2]]
    }
  },
  // Packages

  //AlignTab
  {
    "keys": [",", "a", "a"], "command": "align_tab",
    "args": {"live_preview" : true},
    "context": [{"key": "setting.command_mode"}]
  },
  {
    "keys": [",", "a", "t"], "command": "align_tab",
    "args": {"mode" : true},
    "context": [{"key": "setting.command_mode"}]
  },
  {
    "keys": [",", "a", "="], "command": "align_tab",
    "args" : {"user_input" : "=/f"}
  },
  {
    "keys": [",", "a", ":"], "command": "align_tab",
    "args" : {"user_input" : ":/l0cf1"}
  },
  {
    "keys": [",", "a", ","], "command": "align_tab",
    "args" : {"user_input" : ",/l0cf0"}
  },


  // plain notes
  // General Keymaps
  { "keys": [",", "n", "l"], "command": "notes_list"   },
  { "keys": [",", "n", "b"], "command": "notes_buffer" },
  { "keys": [",", "n", "n"], "command": "notes_new"    },
  { "keys": [",", "n", "j"], "command": "jotter"       },
  { "keys": [",", "n", "i"], "command": "open_inbox"   },

  // ANF
  {"keys": [",", "f", "n"], "command": "advanced_new_file_new", "context": [{"key": "setting.command_mode"}]},
  {"keys": [",", "f", "m"], "command": "advanced_new_file_move", "context": [{"key": "setting.command_mode"}]},
  {"keys": [",", "f", "d"], "command": "advanced_new_file_delete", "context": [{"key": "setting.command_mode"}]},
  {"keys": [",", "f", "r"], "command": "advanced_new_file_delete", "args": {"current": true}, "context": [{"key": "setting.command_mode"}]},
  {"keys": [",", "f", "c"], "command": "advanced_new_file_copy", "context": [{"key": "setting.command_mode"}]},

  // anaconda
  {
    "command": "anaconda_goto", "keys": ["alt+."], "context": [
      {"key": "selector", "operator": "equal", "operand": "source.python"}, {"key": "setting.command_mode"}
    ]
  },
  {
    "command": "anaconda_find_usages", "keys": ["alt+,"], "context": [
      {"key": "selector", "operator": "equal", "operand": "source.python"}, {"key": "setting.command_mode"}
    ]
  },
  {
    "command": "anaconda_doc", "keys": ["alt+o"], "context": [
      {"key": "selector", "operator": "equal", "operand": "source.python"}, {"key": "setting.command_mode"}
    ]
  },
  {
    "command": "anaconda_auto_format", "keys": ["ctrl+alt+r"], "context": [
      {"key": "selector", "operator": "equal", "operand": "source.python"}, {"key": "setting.command_mode"}
    ]
  },

  // ProjectManager
  {"keys": ["ctrl+alt+o"], "command": "project_manager", "args": {"action": "new"}},

  // REPL
  {"keys": [",", "t"], "command": "run_existing_window_command",
    "args":
      {
        "id": "repl_shell",
        "file": "config/Shell/Main.sublime-menu"
      }
  },
  {"keys": [",", "v"], "command": "python_virtualenv_repl"},
  {"keys": [",", "r"], "command": "repl_restart", "context": [{"key": "setting.command_mode"}]},

  // jsPrettier
  { "keys": ["super+alt+f"], "command": "js_prettier" },

  // autofilename
  { "keys": ["alt+a"], "command": "afn_show_filenames",
     "context":
     [
       { "key": "afn_use_keybinding", "operator": "equal", "operand": true }
     ]
  },

  // better bookmarks
  {
    "description": "Swaps the layers backwards.",
    "keys": ["alt+shift+k"], "command": "better_bookmarks",
    "args": {"direction": "prev", "subcommand": "layer_swap"}
  },
  {
    "description": "Swaps the layers forwards.",
    "keys": ["alt+shift+j"], "command": "better_bookmarks",
    "args": {"direction": "next", "subcommand": "layer_swap"}
  },
  {
    "description": "Moves the viewport to the previous bookmark in the current visible layer.",
    "keys": ["alt+k"], "command": "prev_bookmark"
  },
  {
    "description": "Moves the viewport to the next bookmark in the current visible layer.",
    "keys": ["alt+j"], "command": "next_bookmark"
  },
  {
    "description": "Adds a single bookmark to the current visible layer.",
    "keys": ["alt+m"], "command": "better_bookmarks",
    "args": {"subcommand": "mark_line"}
  },
  {
    "description": "Removes all marks in the current visible layer.",
    "keys": ["alt+shift+m"], "command": "better_bookmarks",
    "args": {"subcommand": "clear_marks"}
  },
  {
    "description": "Removes all marks from ALL layers.",
    "keys": ["ctrl+alt+shift+m"], "command": "better_bookmarks",
    "args": {"subcommand": "clear_all"}
  },

  // BH, BracketHighlighter
  // Search to end of file for bracket
  {
      "keys": [",", "b", "e"],
      "command": "bh_key",
      "context": [{"key": "setting.command_mode"}],
      "args":
      {
          "lines" : true
      }
  },
  // Go to left bracket
  {
      "keys": [",", "b", "h"],
      "command": "bh_key",
      "context": [{"key": "setting.command_mode"}],
      "args":
      {
          "no_outside_adj": null,
          "no_block_mode": null,
          "lines" : true,
          "plugin":
          {
              "type": ["__all__"],
              "command": "bh_modules.bracketselect",
              "args": {"select": "left"}
          }
      }
  },
  // Go to right bracket
  {
      "keys": [",", "b", "l"],
      "command": "bh_key",
      "context": [{"key": "setting.command_mode"}],
      "args":
      {
          "no_outside_adj": null,
          "no_block_mode": null,
          "lines" : true,
          "plugin":
          {
              "type": ["__all__"],
              "command": "bh_modules.bracketselect",
              "args": {"select": "right"}
          }
      }
  },
  // Remove brackets
  {
      "keys": [",", "b", "r"],
      "command": "bh_remove_brackets",
      "context": [{"key": "setting.command_mode"}],
  },
  // Select text between brackets
  {
      "no_outside_adj": null,
      "keys": [",", "b", "i"],
      "command": "bh_key",
      "context": [{"key": "setting.command_mode"}],
      "args":
      {
          "lines" : true,
          "plugin":
          {
              "type": ["__all__"],
              "command": "bh_modules.bracketselect"
          }
      }
  },
  // Select text including brackets
  {
      "keys": [",", "b", "a"],
      "command": "bh_key",
      "context": [{"key": "setting.command_mode"}],
      "args":
      {
          "no_outside_adj": null,
          "lines" : true,
          "plugin":
          {
              "type": ["__all__"],
              "command": "bh_modules.bracketselect",
              "args": {"always_include_brackets": true}
          }
      }
  },
  // Select tag name of HTML/XML tag (both opening name and closing)
  {
      "keys": [",", "b", "t"],
      "command": "bh_key",
      "context": [{"key": "setting.command_mode"}],
      "args":
      {
          "plugin":
          {
              "type": ["cfml", "html", "angle"],
              "command": "bh_modules.tagnameselect"
          }
      }
  },
  // Swap brackets with another type
  {
      "keys": [",", "b", "c"],
      "command": "swap_brackets",
      "context": [{"key": "setting.command_mode"}],
  },
  // Surround selection with brackets from quick panel
  {
      "keys": [",", "b", "w"],
      "command": "wrap_brackets",
      "context": [{"key": "setting.command_mode"}],
  },
  // Fold contents between brackets
  {
      "keys": [",", "b", "f"],
      "command": "bh_key",
      "context": [{"key": "setting.command_mode"}],
      "args":
      {
          "plugin": {
              "type": ["__all__"],
              "command" : "bh_modules.foldbracket"
          }
      }
  },
  // Convert single quote string to double quoted string and vice versa
  // Will handle escaping or unescaping quotes within the string
  {
      "keys": [",", "b", "q"],
      "command": "bh_key",
      "context": [{"key": "setting.command_mode"}],
      "args":
      {
          "lines" : true,
          "plugin":
          {
              "type": ["single_quote", "double_quote", "py_single_quote", "py_double_quote"],
              "command": "bh_modules.swapquotes"
          }
      }
  },

  // Emmet
  {
      "keys": [
          ",", "e", "r"
      ],
      "args": {
          "action": "remove_tag"
      },
      "command": "run_emmet_action",
      "context": [{"key": "setting.command_mode"}]
  },
  {
      "keys": [
          ",", "e", "l"
      ],
      "args": {
          "action": "select_next_item"
      },
      "command": "run_emmet_action",
      "context": [{"key": "setting.command_mode"}]
  },
  {
      "keys": [
          ",", "e", "h"
      ],
      "args": {
          "action": "select_previous_item"
      },
      "command": "run_emmet_action",
      "context": [{"key": "setting.command_mode"}]
  },
  {
      "keys": [
          ",", "e", "n"
      ],
      "args": {
          "action": "next_edit_point"
      },
      "command": "run_emmet_action",
      "context": [{"key": "setting.command_mode"}]
  },
  {
      "keys": [
          ",", "e", "p"
      ],
      "args": {
          "action": "prev_edit_point"
      },
      "command": "run_emmet_action",
      "context": [{"key": "setting.command_mode"}]
  },
  {
      "keys": [
          ",", "e", "e"
      ],
      "command": "expand_as_you_type",
      "context": [
          {
              "operand": false,
              "operator": "equal",
              "match_all": true,
              "key": "setting.is_widget"
          },
          {"key": "setting.command_mode"}
      ]
  },
  {
      "keys": [
          ",", "e", "j"
      ],
      "args": {
          "action": "split_join_tag"
      },
      "command": "run_emmet_action",
      "context": [{"key": "setting.command_mode"}]
  },
  {
      "keys": [
          ",", "e", "c"
      ],
      "command": "rename_tag",
      "context": [{"key": "setting.command_mode"}]
  },
  {
      "keys": [
          ",", "e", "m"
      ],
      "args": {
          "action": "matching_pair"
      },
      "command": "run_emmet_action",
      "context": [{"key": "setting.command_mode"}]
  },
  {
      "keys": [
          ",", "e", "i"
      ],
      "args": {
          "action": "balance_inward"
      },
      "command": "run_emmet_action",
      "context": [{"key": "setting.command_mode"}]
  },
  {
      "keys": [
          ",", "e", "o"
      ],
      "args": {
          "action": "balance_outward"
      },
      "command": "run_emmet_action",
      "context": [{"key": "setting.command_mode"}]
  },
  {
      "keys": [
          ",", "e", "w"
      ],
      "command": "wrap_as_you_type",
      "context": [
          {
              "operand": false,
              "operator": "equal",
              "match_all": true,
              "key": "setting.is_widget"
          },
          {"key": "setting.command_mode"}
      ]
  },
  {
      "keys": [
          "ctrl+e"
      ],
      "args": {
          "action": "expand_abbreviation"
      },
      "command": "run_emmet_action"
  },
  // react jsx emmet using tab
  {
    "keys": ["tab"],
    "command": "expand_abbreviation_by_tab",

    // put comma-separated syntax selectors for which
    // you want to expandEmmet abbreviations into "operand" key
    // instead of SCOPE_SELECTOR.
    // Examples: source.js, text.html - source
    "context": [
      {
        "operand": "meta.group.braces.round.js, text.html",
        "operator": "equal",
        "match_all": true,
        "key": "selector"
      },

      // run only if there's no selected text
      {
        "match_all": true,
        "key": "selection_empty"
      },

      // don't work if there are active tabstops
      {
        "operator": "equal",
        "operand": false,
        "match_all": true,
        "key": "has_next_field"
      },

      // don't work if completion popup is visible and you
      // want to insert completion with Tab. If you want to
      // expand Emmet with Tab even if popup is visible --
      // remove this section
      {
        "operand": false,
        "operator": "equal",
        "match_all": true,
        "key": "auto_complete_visible"
      },
      {
        "match_all": true,
        "key": "is_abbreviation"
      }
    ]
  }
]

